<?php

namespace App\Http\Controllers;


use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;

class ProfileController extends Controller {
    /**
     * Display a listing of the resource.
     */

    public function save_changes(Request $request) {
        // creating an array to update
        $updateArr = $request->all();

        // fetching the pre existing user's data
        // EXPLANATION: if user has uploaded certificates previously then it should be apended otherwise the files will be replaced!
        $user = User::find(session()->get('user_id'))->toArray();

        // Check if the key exists in the array before removing it and remove it if it is existing
        if (array_key_exists('_token', $updateArr)) {
            // Removing the _token from the associative array as it is not necessary in case of updating
            unset($updateArr['_token']);
        }
        if (array_key_exists('cover_picture', $updateArr)) {
            // Removing the cover_picture from the associative array as it's name will be generated by the system and only the name will be stored!
            unset($updateArr['cover_picture']);
        }
        if (array_key_exists('profile_picture', $updateArr)) {
            // Removing the profile_picture from the associative array as it's name will be generated by the system and only the name will be stored!
            unset($updateArr['profile_picture']);
        }
        if (array_key_exists('verification_document', $updateArr)) {
            // Removing the verification_document from the associative array as it's name will be generated by the system and only the name will be stored!
            unset($updateArr['verification_document']);
        }
        if (array_key_exists('resume', $updateArr)) {
            // Removing the resume from the associative array as it's name will be generated by the system and only the name will be stored!
            unset($updateArr['resume']);
        }
        if (array_key_exists('certificates', $updateArr)) {
            // Removing the certificates from the associative array as it's name will be generated by the system and only the name will be stored!
            unset($updateArr['certificates']);
        }

        // cover photo update handling
        $file = $request->file('cover_picture');
        if (isset($file)) {
            $filename = session()->get('user_id') . "/profile/cover" . '.' . $request->file('cover_picture')->getClientOriginalExtension();
            $request->file('cover_picture')->storeAs('/', $filename, 'public');
            $updateArr['cover_picture'] = $filename;
        }

        // profile photo update handling
        $file = $request->file('profile_picture');
        if (isset($file)) {
            $filename = session()->get('user_id') . "/profile/avatar" . '.' . $request->file('profile_picture')->getClientOriginalExtension();
            $request->file('profile_picture')->storeAs('/', $filename, 'public');
            $updateArr['profile_picture'] = $filename;
            session()->put('user_profile_img', $filename);
        }

        if (array_key_exists('name', $updateArr)) {
            session()->put('user_name', $updateArr['name']);
        }

        // verification document update handling
        $file = $request->file('verification_document');
        if (isset($file)) {

            // generating filename
            $filename = session()->get('user_id') . "/verification_document/verify_doc" . '.' . $request->file('verification_document')->getClientOriginalExtension();
            $request->file('verification_document')->storeAs('/', $filename, 'public');
            $updateArr['verification_document'] = $filename;
        }

        // resume update handling
        $file = $request->file('resume');
        if (isset($file)) {

            // generating filename
            $filename = session()->get('user_id') . "/resume/resume" . '.' . $request->file('resume')->getClientOriginalExtension();
            $request->file('resume')->storeAs('/', $filename, 'public');
            $updateArr['resume'] = $filename;
        }


        // certificates update handling [multiple file input supported]
        $file = $request->file('certificates');
        if (isset($file)) {
            $file_arr = [];
            foreach ($request->file('certificates') as $index => $file) {

                // generating array for filename
                $file_to_store = session()->get('user_id') . "/certificates/" . time() . '_' . $index . '.' . $file->getClientOriginalExtension();
                array_push($file_arr, $file_to_store);

                // uploading individual certificates
                $file->storeAs('/', $file_to_store, 'public');
            }

            // generating filename
            $filename = implode("||", $file_arr);

            // if user has already uploaded any certificates then the new files should be appended at the end
            // FORMAT: prefile.ext + || + newfiles.....
            if ($user['certificates']) {
                $filename = $user['certificates'] . "||" . $filename;
            }
            $updateArr['certificates'] = $filename;
        }

        // this code below automatically updates the user data according to the form that is submitted
        $result = User::find(session()->get('user_id'))->update($updateArr);

        // preparating json response
        // TODO: uncomment this lines
        if ($result) {
            return response()->json(['success' => true, 'message' => 'Profile Updated Successfully'], 200);
        }
        else {
            return response()->json(['success' => false, 'message' => 'Failed to update profile'], 422);
        }

        // return redirect(route('profile.edit'));
    }

    public function toggleVisibility(Request $request) {
        $studentId = session()->get('user_id');
        $visibility = $request->input('profile_visibility');


        $user = User::where('student_id', $studentId)->first();

        if ($user) {
            $user->profile_visibility = $visibility;
            $user->save();
            return response()->json(['success' => true, 'message' => 'Privacy Update']);//thi sis shobhan
        }
        else {
            return response()->json(['success' => false, 'message' => 'User not found'], 404);//this is altab
        }
    }

    public function changePassword(Request $request) {

        $request->validate([
            'c_old_password' => 'required',
            'c_new_password' => 'required|string|min:6|different:c_old_password',
            'c_new_cpassword_again' => 'required|same:c_new_password',
        ], [
            'c_old_password.required' => 'Please enter your current password.',
            'c_new_password.required' => 'Please enter a new password.',
            'c_new_password.min' => 'The new password must be at least :min characters long.',
            'c_new_password.different' => 'The new password must be different from the current password.',
            'c_new_cpassword_again.required' => 'Please confirm your new password.',
            'c_new_cpassword_again.same' => 'The new passwords do not match.',
        ]);


        // Retrieve the user's email from the session
        $userEmail = session()->get('loggedInUser');

        // Retrieve the user based on the email stored in the session
        $user = User::where('email', $userEmail)->first();

        // Check if the user exists
        if (!$user) {
            return response()->json(['message' => 'User not found.'], 404);
        }

        // Check if the provided current password matches the user's password
        if (!Hash::check($request->c_old_password, $user->password)) {
            return response()->json(['message' => 'The current password is incorrect.'], 422);
        }

        // Update the user's password
        $user->password = Hash::make($request->c_new_password);
        $user->save();

        return response()->json(['message' => 'Password changed successfully.']);
    }

    public function delete_files($filename) {
        $filepath = 'public/' . $filename;

        $user = User::find(session()->get('user_id'));

        // checking if resume file is being deleted or not for database upload
        if (strpos($filename, "/resume/") !== false) {
            // deleting resume file

            if (Storage::exists($filepath)) {
                try {
                    // Attempt to delete the file
                    Storage::delete($filepath);
                    $user->resume = null;
                    $res = $user->save();
                    if ($res) {
                        return response()->json(['success' => true, 'message' => 'File deleted successfully!'], 200);
                    }
                } catch (\Exception $e) {
                    // Handle other exceptions that may occur during deletion
                    return response()->json(['success' => false, 'message' => $e->getMessage()], 422);
                }
            }
            else {
                return response()->json(['success' => false, 'message' => "An error occured!"], 422);
            }
        }
        else {
            // deleting certificate file
            
            $existing_certificates = explode('||', $user->certificates);

            $cer_array = array_filter($existing_certificates, function ($value) use($filename) {
                return $value != $filename;
            });
            
            $filesForDb = implode("||", $cer_array);

            if (Storage::exists($filepath)) {
                try {
                    // Attempt to delete the file
                    Storage::delete($filepath);
                    $user->certificates = $filesForDb;
                    $res = $user->save();
                    if ($res) {
                        return response()->json(['success' => true, 'message' => 'File deleted successfully!'], 200);
                    }
                } catch (\Exception $e) {
                    // Handle other exceptions that may occur during deletion
                    return response()->json(['success' => false, 'message' => $e->getMessage()], 422);
                }
            }
            else {
                return response()->json(['success' => false, 'message' => "An error occured!"], 422);
            }
            
        }
    }
}
